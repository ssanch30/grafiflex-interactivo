enum RolCliente {
  COMPRAS
  PRODUCCION
  DISENO
  GERENCIA
  ADMINISTRACION
  VENTAS
}

type ContactoCliente {
  id: ID!
  nombre: String
  email: String
  cargo: String
  enviarFactura: Boolean
  rol: RolCliente
  cel: String
  userID: ID
}

type DatosFacturacion {
  formaPago: String
  iva: Boolean
  variacionTRM: Boolean
  validarCxC: Boolean
  retefuenteType: String
  retefuentePorc: Float
  reteIvaPorc: Float
  reteIcaPorc: Float
  precioOrden: [PrecioOrden]
  regimenAdq: RegimenAdq
  tipoPersonaAdq: TipoPersonaAdq
}

type Valor {
  tipo: String
  valor: Float
}

type PrecioOrden{
  tipoOrden: TipoOrden
  unidades: String
  valores: [Valor]
  valor: Float
}

enum TipoCorte {
  CORTE_CUCHILLA
  TROQUEL_RECTANGULAR
  TROQUEL_ESPECIAL
}

type Montaje {
  pistas: Int
  repeticiones: Int
  rodillo: Float
  paso: Float
  gapPistas: Float
  gapRepeticiones: Float
  anchoBobina: Float
  desarrollo: Float
  truncado: Boolean
  enfrentado: Int
  cantidadTruncado: Float
  ancho: Float
  alto: String
  tipoCorte: TipoCorte
  posicionSalida: String
}

enum Estados {
  PENDIENTE_APROBACION_CLIENTE
  APROBADO_CLIENTE
  CALIDAD_RECHAZADO
  CALIDAD_APROBADO
  CALIDAD_SUGERENCIA
  MONTAJE_APROBADO_CLIENTE
  MONTAJE_PENDIENTE_APROBACION
  COTIZADO
  PENDIENTE_RETOQUE_FOTOGRAFICO
  RETOQUE_TERMINADO
  PLANCHAS_LISTAS
  FINALIZA_PREPRENSA
  FACTURADO
  SUSPENDIDO
  REMISIONADO
  SHERPA_PEND_APROBACION
  SHEPA_APROBADA
}

enum Plancha {
  F45
  F67
  F100
  F112
  F155
  TOYOBO95
  WF80
  KM73
  WS94
}

enum Prioridad {
  USUAL
  URGENCIA
  EMERGENCIA
  PRIMERA_HORA
}

enum TipoOrden {
  ARTE
  FINALIZACION
  OPENPRINT
  COPIADO
  REPETICION
  PRUEBA_CONTRATO
  MONTAJE
  MAQUILA
  POSITIVO_NEGATIVO
  OTRO
}



enum Roles {
  COORDINACION
  DISENO
  CALIDAD
  PRODUCCION
  FACTURACION
  CLIENTE
  OTRO
}

type Usuario @model @auth(rules: [{allow: public}]) {
  id: ID!
  cedula: String
  nombres: String
  email: String
  roles: [Roles]
  ordenesPendientes: [Orden] @hasMany(indexName: "byUser", fields: ["id"])
  ordenesRealizadas: [Orden] @manyToMany(relationName: "OrdenUsers")
}

enum TipoDocumento {
  REGISTRO_CIVIL
  TARJETA_IDENTIDAD
  CEDULA_CIUDADANIA
  TARJETA_EXTRANJERIA
  CEDULA_EXTRANJERIA
  NIT
  PASAPORTE
  DOC_ID_EXTRANJERO
  NIT_OTRO_PAIS
  NUIP
}

enum TipoPersonaAdq {
  JURIDICA
  NATURAL
}

enum RegimenAdq {
  RESPONSABLE_IVA
  NO_RESPONSABLE_IVA
}

type Maquina {
  nombre: String
  tipoDesarrollo: String
  tipoMaquina: String
  paso: Float
  anchoBanda: String
  velocidad: Int
  plancha: [Plancha]
  lpis: [Int]
}

enum SucursalEncargada {
  ENVIGADO
  BARRANQUILLA
  CALI
}

enum Sector {
  FLEXIBLES
  ETIQUETAS
  FUNDAS
  CORRUGADOS
  SACOS
  SACHET
  VASOS_CARTON
  MARQUILLAS_TELAS
  TAPAS
  OTROS
  BLISTER
}

type Cliente @model @auth(rules: [{allow: public}]) {
  id: ID! @index(name: "byCliente", queryField: "byClienteId")
  nit_cedula: String
  codigo: String
  ciudad: String
  sector: [Sector]
  marcas: [Marca] @hasMany (indexName: "byCliente", fields: ["id"])
  digitoVerificacion: Int
  estado: Boolean
  maquinas: [Maquina]
  razonSocial: String
  departamento: String
  pais: String
  sucursalEncargada: SucursalEncargada
  direccion: String
  primerNombre: String
  segundoNombre: String
  primerApellido: String
  segundoApellido: String
  tipoDocumento: TipoDocumento
  datosFacturacion: DatosFacturacion
  productos: [Producto] @hasMany(indexName: "byCliente", fields: ["id"])
  ContactoClientes: [ContactoCliente]
  ordenes: [Orden] @hasMany(indexName: "byCliente", fields: ["id"])
  indicativoPais: Int
  indicativoCiudad: Int
  telefono: String
}
type Marca @model @auth(rules: [{allow: public}]){
  id: ID!
  nombre: String
  productor: String
  clienteID: ID @index(name: "byCliente", queryField: "marcasByCliente")
  productos: [Producto] @hasMany
}

type Producto @model @auth(rules: [{allow: public}]) {
  id: ID! 
  cliente: Cliente @belongsTo
  clienteID: ID! @index(name: "byCliente", queryField: "productosByCliente", sortKeyFields: ["nombre"])
  nombre: String
  marca: Marca @belongsTo
  marcaID: ID @index(name: "byMarca")
  ordenes: [Orden] @manyToMany(relationName: "OrdenProducto")
  productoNuevo: Boolean
  productoExistente: String
  productoRefID:ID
  mainFiles: [S3Object]
  auxFiles: [S3Object] 
}

type Orden @model @auth(rules: [{allow: public}]) {
  id: ID!
  cliente: Cliente @belongsTo
  odc: String
  clienteID: ID! @index(name: "byCliente", queryField: "ordenesByCliente")
  prioridad: Prioridad
  tipoOrden: [TipoOrden]
  cooimpreso: Boolean
  Plancha: Plancha
  ResponsableActualID: ID @index(name: "byUser")
  ResponsableActual: Usuario 
  estado: Estados
  maquina: String
  Responsables: [ Usuario ] @manyToMany(relationName: "OrdenUsers")
  finalizacion: Montaje 
  numeroOPant: Int
  versionOPant: Int
  productoID:  [ID!] 
  producto: [Producto] @manyToMany(relationName: "OrdenProducto")
  nombreAnt: String
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type Todo @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  description: String
}
